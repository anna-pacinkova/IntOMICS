% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sampling_phase.R
\name{sampling_phase}
\alias{sampling_phase}
\title{Sampling phase}
\usage{
sampling_phase(
  second.adapt.phase_net,
  omics,
  layers_def,
  prob_mbr,
  thin,
  minseglen,
  burn_in,
  annot
)
}
\arguments{
\item{second.adapt.phase_net}{list output of the second.adapt.phase
function.}

\item{omics}{named list containing the gene expression (possibly copy number
variation and methylation data).
Each component of the list is a matrix with samples in rows and
features in columns.}

\item{layers_def}{data.frame containing the modality ID, corresponding layer
in BN and maximal number of parents from given layer to GE nodes.}

\item{prob_mbr}{numeric vector probability of the MBR step.}

\item{thin}{numeric vector thinning frequency of the resulting MCMC
simulation.}

\item{minseglen}{numeric vector minimal number of iterations
with the c_rms value below the c_rms threshold.}

\item{burn_in}{numeric vector the minimal length of burn-in period
of the MCMC simulation.}

\item{annot}{named list containing the associated methylation probes
of given gene.}
}
\value{
List of 2 elements: sampling phase result; RMS used to evaluate
MCMC convergence
}
\description{
\code{sampling_phase} Now we apply 2 MCMC simulations and check the RMS value.
After the burn-in period, we discard the values from the first half
of this phase.
}
\examples{
data(list=c("first.adapt.phase_net", "OMICS_mod_res"),
    package="IntOMICS")
if(interactive()){transient.phase_net <- transient_phase(prob_mbr = 0.07, 
    first.adapt.phase_net = first.adapt.phase_net, 
    omics = OMICS_mod_res$omics, B_prior_mat = OMICS_mod_res$B_prior_mat, 
    layers_def = OMICS_mod_res$layers_def, annot = OMICS_mod_res$annot,
    energy_all_configs_node = 
    OMICS_mod_res$pf_UB_BGe_pre$energy_all_configs_node,
    BGe_score_all_configs_node = 
    OMICS_mod_res$pf_UB_BGe_pre$BGe_score_all_configs_node, 
    parent_set_combinations = 
    OMICS_mod_res$pf_UB_BGe_pre$parents_set_combinations) 
    second.adapt.phase_net <- second_adapt_phase(prob_mbr = 0.07, 
    transient.phase_net = transient.phase_net, woPKGE_belief = 0.5, 
    omics = OMICS_mod_res$omics, B_prior_mat = OMICS_mod_res$B_prior_mat, 
    layers_def = OMICS_mod_res$layers_def, annot = OMICS_mod_res$annot,
    energy_all_configs_node =
    OMICS_mod_res$pf_UB_BGe_pre$energy_all_configs_node,
    BGe_score_all_configs_node = OMICS_mod_res$pf_UB_BGe_pre$BGe_score_all_configs_node, 
    parent_set_combinations = OMICS_mod_res$pf_UB_BGe_pre$parents_set_combinations) 
    sampling_phase(omics = OMICS_mod_res$omics, 
    second.adapt.phase_net = second.adapt.phase_net, 
    layers_def = OMICS_mod_res$layers_def, prob_mbr = 0.07, 
    thin = 500, minseglen = 500, burn_in = 10000, 
    annot = OMICS_mod_res$annot)}

}
